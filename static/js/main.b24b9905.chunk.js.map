{"version":3,"sources":["components/TypedJs.js","components/Search.js","localStorageHelper.js","actions/index.js","components/MovieButton.js","components/ReusableMovieList.js","components/CRUD/MovieList.js","history.js","components/GoogleAuth.js","components/Banner.js","components/Header.js","components/CRUD/MyMovieList.js","components/App.js","reducers/index.js","reducers/movieReducers.js","reducers/fetchAuth.js","reducers/fetchStatus.js","reducers/getId.js","reducers/nominatedFilm.js","index.js"],"names":["TypedJs","options","strings","this","props","typeSpeed","backSpeed","loop","loopCount","Infinity","typed","Typed","el","destroy","style","whiteSpace","ref","React","Component","Search","cname","id","value","onChange","type","placeholder","className","autoComplete","LocalStorageHelper","add","v","a","JSON","parse","localStorage","getItem","push","setItem","stringify","get","k","removeItem","nominated","Object","values","filter","movie","imdbID","getGoogleAuth","dispatch","Promise","resolve","reject","window","gapi","load","client","init","clientId","scope","auth","auth2","getAuthInstance","payload","fetchNominatedMovies","MovieButton","state","status","onClickHandler","setState","deleteMovie","saveMovies","localMovies","isFound","find","Title","isFoundInRS","reduxMovies","every","nominatedColor","disabledClass","length","pointerEvents","opacity","onClick","connect","nominatedFilm","getState","signInId","firsthalf","split","splice","join","secondhalf","currentUser","getBasicProfile","getGivenName","myFavMovie","ReusableMovieList","renderMovieButton","renderMovies","movies","hideButton","signInID","data","map","$","dimmer","on","Poster","src","srcSet","sizes","alt","Year","MovieList","term","onChangeHandler","e","clearTimeout","timer","target","setTimeout","trim","searchMovies","renderResultsFound","moviesArr","renderContent","labelClass","textAlign","marginTop","queryResults","nominatedFilms","q","toLowerCase","axios","response","Error","createBrowserHistory","GoogleAuth","onAuthChange","isSignedIn","signIn","current","getId","signOut","signUserIn","signUserOut","renderAuthButtons","fetchStatus","Fragment","callback","listen","Banner","totalNoms","position","top","zIndex","data-text","backgroundColor","Header","to","MyMovieList","myMovies","fetchNominatedMoviesRS","nominatedMoviesFromRS","App","history","path","component","exact","combineReducers","dummy","action","error","nested","forEach","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"+RAuCeA,E,kLAjCO,IAKZC,EAAU,CACdC,QAHkBC,KAAKC,MAAjBF,QAING,UAAW,GACXC,UAAW,GACXC,MAAM,EACNC,UAAWC,KAGbN,KAAKO,MAAQ,IAAIC,IAAMR,KAAKS,GAAIX,K,6CAMhCE,KAAKO,MAAMG,Y,+BAGH,IAAD,OACP,OACE,sBACEC,MAAO,CAAEC,WAAY,OACrBC,IAAK,SAACJ,GACJ,EAAKA,GAAKA,S,GA5BEK,IAAMC,WCWbC,G,MAdA,SAAC,GAA8C,IAAD,IAA3CC,aAA2C,MAAnC,GAAmC,MAA/BC,UAA+B,MAA1B,GAA0B,EAAtBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC5C,OACE,uBACED,MAAOA,EACPC,SAAUA,EACVC,KAAK,OACLC,YAAY,eACZJ,GAAIA,EACJK,UAAWN,EACXO,aAAa,U,iDCPbC,E,kCAAAA,EACGC,IAAM,SAACC,GACZ,IAAIC,EAAI,IAERA,EAAIC,KAAKC,MAAMC,aAAaC,QAAQ,qBAAuB,IAEzDC,KAAKN,GAEPI,aAAaG,QAAQ,kBAAmBL,KAAKM,UAAUP,KARrDH,EAWGW,IAAM,SAACC,GAEZ,OADiBR,KAAKC,MAAMC,aAAaC,QAAQK,KAAO,IAZtDZ,EAgBGa,WAAa,SAACD,EAAGnB,GACtB,IAAIqB,EAAYC,OAAOC,OAjBrBhB,EAiBiCW,IAAIC,IACvCE,EAAYV,KAAKM,UACfI,EAAUG,QAAO,SAACC,GAAD,OAAWA,EAAMC,SAAW1B,MAE/Ca,aAAaG,QAAQG,EAAGE,IAIbd,QCyBFoB,EAAgB,yDAAM,WAAOC,GAAP,eAAAlB,EAAA,sEAK3B,IAAImB,SAAQ,SAACC,EAASC,GAC1BC,OAAOC,KAAKC,KAAK,eAAgBJ,MANF,uBAe3BE,OAAOC,KAAKE,OAAOC,KAAK,CAC5BC,SACE,2EACFC,MAAO,YAlBwB,OAqB3BC,EAAOP,OAAOC,KAAKO,MAAMC,kBAC/Bb,EAAS,CAAEzB,KAAM,cAAeuC,QAASH,IAtBR,2CAAN,uDA0EhBI,EAAuB,WAElC,MAAO,CACLxC,KAAM,YACNuC,QAASnC,EAAmBW,IAAI,qBChI9B0B,E,4MAKJC,MAAQ,CAAEC,OAAQ,Y,EA+BlBC,eAAiB,WAMW,cAAtB,EAAKF,MAAMC,QACb,EAAKE,SAAS,CAAEF,OAAQ,aACxB,EAAK/D,MAAMkE,YAAY,EAAKlE,MAAM0C,MAAMC,UAExC,EAAKsB,SAAS,CAAEF,OAAQ,cACxB,EAAK/D,MAAMmE,WAAW,EAAKnE,MAAM0C,S,kEAxChB,IAAD,OAKlB,GAAKd,KAAKC,MAAMC,aAAaC,QAAQ,oBAArC,CAIA,IAAMqC,EAActC,aAAaC,QAAQ,mBACnCsC,EAAUzC,KAAKC,MAAMuC,GAAaE,MACtC,SAAC5B,GAAD,OAAWA,EAAM6B,QAAU,EAAKvE,MAAM0C,MAAM6B,SAIxCC,GAAejC,OAAOC,OAAOzC,KAAKC,MAAMyE,aAAaC,OACzD,SAAChC,GAAD,OAAWA,EAAM6B,QAAU,EAAKvE,MAAM0C,MAAM6B,SAO1CF,GAAWG,IACbzE,KAAKkE,SAAS,CAAEF,OAAQ,cACxBhE,KAAKC,MAAMmE,WAAWpE,KAAKC,MAAM0C,W,+BA0BnC,IAAIiC,EAAuC,cAAtB5E,KAAK+D,MAAMC,OAAyB,WAAa,GAClEa,EAAgB,GAQpB,MANwB,aAAtB7E,KAAK+D,MAAMC,QACsC,IAAjDxB,OAAOC,OAAOzC,KAAKC,MAAMyE,aAAaI,SAEtCD,EAAgB,CAAEE,cAAe,OAAQC,QAAS,QAIlD,qBAAKzD,UAAU,SAAf,SACE,qBACEA,UAAS,2BAAsBqD,GAC/BjE,MAAOkE,EACPI,QAASjF,KAAKiE,eAHhB,SAKGjE,KAAK+D,MAAMC,e,GA1EIlD,IAAMC,WAqFjBmE,eAJS,SAACnB,GACvB,MAAO,CAAEW,YAAaX,EAAMoB,iBAGU,CAAEf,WDVhB,SAACzB,GAAD,8CAAW,WAAOG,EAAUsC,GAAjB,yBAAAxD,EAAA,wDAcRwD,IAAnBC,EAd2B,EAc3BA,SAAU5B,EAdiB,EAcjBA,KACd6B,EAAYD,EAASnE,GAAGqE,MAAM,IAAIC,OAAO,EAAG,GAAGC,KAAK,IACpDC,EAAaL,EAASnE,GACvBqE,MAAM,IACNC,OAAOH,EAASnE,GAAG4D,OAAS,GAC5BW,KAAK,IAnB2B,UAoBbH,GApBa,OAoBD7B,EAAKkC,YACpCvD,MACAwD,kBACAC,gBAvBgC,OAuBfH,GAEdI,EAzB6B,eA0B9BnD,GAOHlB,EAAmBW,IAAI,mBAAmBuC,OACxC,SAAChC,GAAD,OAAWA,EAAM6B,QAAUsB,EAAWtB,UAGxC/C,EAAmBC,IAAIoE,GAGzBhD,EAAS,CAAEzB,KAAM,WAAYuC,QAASkC,IAxCH,2CAAX,yDCU4B3B,YDiC3B,SAACjD,GAAD,8CAAQ,WAAO4B,EAAUsC,GAAjB,SAAAxD,EAAA,sDAEjCH,EAAmBa,WAAW,kBAAmBpB,GACjD4B,EAAS,CAAEzB,KAAM,eAAgBuC,QAAS1C,IAHT,2CAAR,0DCjCZgE,CACbpB,GCCaiC,E,4MAhFbC,kBAAoB,SAACrD,GAA2B,IAApB7C,EAAmB,uDAAT,KACpC,OACE,qBAAKyB,UAAU,aAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC,EAAD,CAAaoB,MAAOA,EAAO7C,QAASA,S,EAM5CmG,aAAe,WAAM,IAIXC,EAAW,EAAKjG,MAAhBiG,OAQFC,EACS,OARM,EAAKlG,MAAlBmG,SASF,SAACC,GACC,MAAO,IAET,EAAKL,kBAOX,OAAOxD,OAAOC,OAAOyD,GAAQI,KAAI,SAAC3D,GAChC,OACE,qBACEpB,UAAU,0EADZ,SAIE,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,wBAAf,UACE,sBACEA,UAAU,0BACVV,IAAK,WACHqC,OAAOqD,EAAE,yBAAyBC,OAAO,CACvCC,GAAI,WAJV,UAQoB,QAAjB9D,EAAM+D,OACL,qBAAKC,IAAKhE,EAAM+D,OAAQnF,UAAU,eAElC,qBACEoF,IAAI,+BACJC,OAAO,oCACPC,MAAM,QACNC,IAAI,gBAGPX,EAAWxD,MAEd,sBAAKpB,UAAU,UAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBoB,EAAM6B,QAC7B,qBAAKjD,UAAU,OAAf,SACE,uBAAMA,UAAU,OAAhB,wBAAmCoB,EAAMoE,mBA3B5CpE,EAAMC,Y,uDAsCjB,OAAO5C,KAAKiG,mB,GA7EgBnF,IAAMC,WCFhCiG,E,kDACJ,WAAY/G,GAAQ,IAAD,8BACjB,cAAMA,IAGR8D,MAAQ,CAAEkD,KAAM,IAJG,EAgBnBC,gBAAkB,SAACC,GACjBC,aAAa,EAAKC,OAClB,EAAKnD,SAAS,CAAE+C,KAAME,EAAEG,OAAOnG,QAC/B,EAAKkG,MAAQE,YAAW,WACe,IAAjCJ,EAAEG,OAAOnG,MAAMqG,OAAO1C,OAI1B,EAAK7E,MAAMwH,aAAaN,EAAEG,OAAOnG,OAH/B,EAAKlB,MAAMwH,aAAa,MAIzB,MAzBc,EAiCnBC,mBAAqB,WAAO,IAClBxB,EAAW,EAAKjG,MAAhBiG,OACFyB,EAAYnF,OAAOC,OAAOyD,GAChC,OAAyB,IAArByB,EAAU7C,QAA2C,KAA3B,EAAKf,MAAMkD,KAAKO,OACrCG,EAAU,GAEY,KAA3B,EAAK5D,MAAMkD,KAAKO,OAAsB,KACnCG,EAAU7C,OAAS,mBAxCT,EA2CnB8C,cAAgB,WAKd,IAAMC,EAA+C,IAAlC,EAAK9D,MAAMkD,KAAKO,OAAO1C,OAAe,OAAS,OAElE,OACE,sBAAKvD,UAAU,eAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,sBAAKA,UAAS,8BAAyBsG,EAAzB,oBAAd,UACE,sBAAMtG,UAAU,eAAhB,uBACA,cAAC,EAAD,CACExB,QAAS,CAAC,0BACVwB,UAAU,oBAId,sBAAKA,UAAS,2CAAsCsG,GAApD,UACE,wCACA,qBAAKtG,UAAU,mCAAf,SACE,cAAC,EAAD,CACEN,MAAM,oBACNC,GAAG,oBACHC,MAAO,EAAK4C,MAAMkD,KAClB7F,SAAU,EAAK8F,0BAKvB,qBACE3F,UAAU,UACVZ,MAAO,CAAEmH,UAAW,QAASC,UAAW,YAF1C,SAIE,qBAAKxG,UAAU,uBAAf,SACE,+BAAO,EAAKmG,2BAGhB,qBAAKnG,UAAU,yBAAf,SAEI,cAAC,EAAD,CACE2E,OAAQ,EAAKjG,MAAMiG,OACnBE,SAAU,EAAKnG,MAAMmG,iBArFd,E,gEAOjBpG,KAAKqH,MAAQ,KACbrH,KAAKC,MAAM4D,yB,+BAsFX,OAAO7D,KAAK4H,oB,GA/FQ7G,aA2GTmE,eARS,SAACnB,GACvB,MAAO,CACLmC,OAAQnC,EAAMiE,aACd5B,SAAUrC,EAAMsB,SAASnE,GACzB+G,eAAgBlE,EAAMoB,iBAIc,CAAEsC,aHnGd,SAACS,GAAD,8CAAO,WAAOpF,GAAP,eAAAlB,EAAA,6DAMjCsG,EAAIA,EAAEC,cAAcX,OANa,SAOVY,IAAMhG,IAAN,qDACyB8F,EADzB,gBAPU,QAO3BG,EAP2B,QAWpBhC,KAAKrF,OAChB8B,EAAS,CAAEzB,KAAM,eAAgBuC,QAASyE,EAAShC,OAEnDvD,EAAS,CAAEzB,KAAM,iBAAkBuC,QAASyE,EAAShC,KAAKiC,QAd3B,2CAAP,uDGmG4BzE,wBAAzCqB,CACb8B,G,QC7GauB,gBCITC,G,kNAUJC,aAAe,SAACC,GAMVA,EACF,EAAKzI,MAAM0I,OAAO,EAAK1I,MAAM2I,QAAQjD,YAAYvD,MAAMyG,SAEvD,EAAK5I,MAAM6I,W,EAIfC,WAAa,WAIX,EAAK9I,MAAM2I,QAAQD,U,EAGrBK,YAAc,WAIZ,EAAK/I,MAAM2I,QAAQE,W,EAGrBG,kBAAoB,WAIlB,OAA8B,IAA1B,EAAKhJ,MAAMyI,WAEX,wBACEnH,UAAU,+BACV0D,QAAS,EAAK+D,YAFhB,uBAUiC,IAA1B,EAAK/I,MAAMyI,WAElB,wBACEzD,QAAS,EAAK8D,WACdxH,UAAU,+BAFZ,qBASG,M,kEAzDPvB,KAAKC,MAAMiJ,YAAYlJ,KAAKyI,gB,+BA6D5B,OAAO,cAAC,IAAMU,SAAP,UAAiBnJ,KAAKiJ,0B,GApERnI,IAAMC,YA2EhBmE,eAHS,SAACnB,GACvB,MAAO,CAAE6E,QAAS7E,EAAMN,KAAMiF,WAAY3E,EAAM2E,cAEV,CAAEQ,YLpDf,SAACE,GAAD,8CAAc,WAAOtG,EAAUsC,GAAjB,eAAAxD,EAAA,sEAIjCkB,EAASD,KAJwB,OAMjCY,EAAO2B,IAAW3B,KACxB2F,EAAS3F,EAAKiF,WAAWtG,OAGzBU,EAAS,CAAEzB,KAAM,gBAAiBuC,QAASH,EAAKiF,WAAWtG,QAI3DqB,EAAKiF,WAAWW,QAAO,WACrBD,EAAS3F,EAAKiF,WAAWtG,OACzBU,EAAS,CAAEzB,KAAM,gBAAiBuC,QAASH,EAAKiF,WAAWtG,WAhBtB,2CAAd,yDKoD4BuG,OLnFjC,SAACzH,GACrB,MAAO,CACLG,KAAM,UACNH,OKgF2D4H,QL5ExC,WACrB,MAAO,CACLzH,KAAM,cK0EK6D,CACbsD,G,QChFIc,E,uKAEF,OAAItJ,KAAKC,MAAMsJ,UAAUzE,OAAS,GAIJ,OAA1B9E,KAAKC,MAAMyI,WAHN,KAQP,qBACEnH,UAAU,yBACVZ,MAAO,CAAE6I,SAAU,SAAUC,IAAK,IAAKC,OAAQ,QAFjD,SAIE,qBACEnI,UAAU,2BACVoI,YAAU,0DACVhJ,MAAO,CAAEiJ,gBAAiB,mB,GAlBf9I,IAAMC,WAgCZmE,eAPS,SAACnB,GACvB,MAAO,CACLwF,UAAW/G,OAAOC,OAAOsB,EAAMoB,eAC/BuD,WAAY3E,EAAMsB,SAASnE,MAIhBgE,CAAyBoE,GClBzBO,EAhBA,WACb,OACE,sBAAKtI,UAAU,eAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,oBAAf,UACE,cAAC,IAAD,CAAMuI,GAAG,UAAUvI,UAAU,OAA7B,sBAGA,qBAAKA,UAAU,aAAf,SACE,cAAC,EAAD,aCTJwI,E,4MASJ9D,aAAe,WAMb,OAA4B,OAAxB,EAAKhG,MAAMmG,SACN,8EAGP,cAAC,EAAD,CACEF,OAAQ,EAAKjG,MAAM+J,SACnB5D,SAAU,EAAKnG,MAAMmG,Y,kEAfzBpG,KAAKC,MAAMgK,2B,+BAqBX,OACE,sBAAK1I,UAAU,eAAf,UACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,SAAf,SACE,wDAGJ,qBAAKA,UAAU,yBAAf,SAAyCvB,KAAKiG,wB,GAlC5BnF,IAAMC,WA+CjBmE,eAPS,SAACnB,GACvB,MAAO,CACLiG,SAAUxH,OAAOC,OAAOsB,EAAMoB,eAC9BiB,SAAUrC,EAAMsB,SAASnE,MAIW,CAAE+I,uBRoFJ,yDAAM,WAAOnH,EAAUsC,GAAjB,eAAAxD,EAAA,sEACpCkB,EAASe,KAD2B,cAGpCqG,EAAwB9E,IAAWD,cAHC,kBAKnC,CACL9D,KAAM,eACNuC,QAASsG,IAP+B,2CAAN,0DQpFvBhF,CACb6E,GC7BaI,EAZH,WACV,OACE,qBAAK5I,UAAU,eAAf,SACE,eAAC,IAAD,CAAQ6I,QAASA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWtD,EAAWuD,OAAK,IACjD,cAAC,IAAD,CAAOF,KAAK,eAAeC,UAAWP,EAAaQ,OAAK,U,QCXjDC,cAAgB,CAC7BC,MAAO,iBAAM,+CACbzC,aCTa,WAAyB,IAAxBjE,EAAuB,uDAAf,GAAI2G,EAAW,uCACrC,OAAQA,EAAOrJ,MACb,IAAK,eAEH,OAAO,eAAKqJ,EAAO9G,QAAQ5C,QAC7B,IAAK,iBAEH,MAAO,CAAE2J,MAAOD,EAAO9G,SACzB,QACE,OAAOG,IDCXN,KEVa,WAAyB,IAAxBM,EAAuB,uDAAf,GAAI2G,EAAW,uCACrC,OAAQA,EAAOrJ,MACb,IAAK,cACH,OAAOqJ,EAAO9G,QAChB,QACE,OAAOG,IFMX2E,WGXa,WAA2B,IAA1B3E,EAAyB,uDAAjB,KAAM2G,EAAW,uCACvC,OAAQA,EAAOrJ,MACb,IAAK,gBACH,OAAOqJ,EAAO9G,QAChB,QACE,OAAOG,IHOXsB,SIZa,WAAqD,IAApDtB,EAAmD,uDAA3C,CAAE2E,WAAY,KAAMxH,GAAI,MAAQwJ,EAAW,uCACjE,OAAQA,EAAOrJ,MACb,IAAK,UAEH,OAAO,2BAAK0C,GAAZ,IAAmB2E,YAAY,EAAMxH,GAAIwJ,EAAOxJ,KAClD,IAAK,WAEH,OAAO,2BAAK6C,GAAZ,IAAmB2E,YAAY,EAAOxH,GAAI,OAC5C,QACE,OAAO6C,IJIXoB,cKba,WAAyB,IAAxBpB,EAAuB,uDAAf,GAAI2G,EAAW,uCACrC,OAAQA,EAAOrJ,MACb,IAAK,WACH,OAAO,2BAAK0C,GAAZ,kBAAoB2G,EAAO9G,QAAQhB,OAAS8H,EAAO9G,UACrD,IAAK,eAEH,cADOG,EAAM2G,EAAO9G,SACb,eAAKG,GACd,IAAK,YAMH,IAAM6G,EAAS,GAIf,OAHAF,EAAO9G,QAAQiH,SAAQ,SAAClI,GACtBiI,EAAOjI,EAAMC,QAAUD,KAElB,2BAAKoB,GAAU6G,GACxB,QACE,OAAO7G,M,QCPP+G,EACe,qBAAX5H,QACNA,OAAO6H,sCACTC,IAEIC,EAAQC,YAAYC,EAAUL,EAAiBM,YAAgBC,OAErEC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.b24b9905.chunk.js","sourcesContent":["import Typed from \"typed.js\";\r\nimport React from \"react\";\r\n\r\n//taken and modified from https://jsfiddle.net/mattboldt/ovat9jmp/\r\n\r\nclass TypedJs extends React.Component {\r\n  componentDidMount() {\r\n    // If you want to pass more options as props, simply add\r\n    // your desired props to this destructuring assignment.\r\n    const { strings } = this.props;\r\n    // You can pass other options here, such as typing speed, back speed, etc.\r\n    const options = {\r\n      strings: strings,\r\n      typeSpeed: 50,\r\n      backSpeed: 50,\r\n      loop: true,\r\n      loopCount: Infinity,\r\n    };\r\n    // this.el refers to the <span> in the render() method\r\n    this.typed = new Typed(this.el, options);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Make sure to destroy Typed instance on unmounting\r\n    // to prevent memory leaks\r\n    this.typed.destroy();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span\r\n        style={{ whiteSpace: \"pre\" }}\r\n        ref={(el) => {\r\n          this.el = el;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default TypedJs;\r\n","import React from \"react\";\r\n\r\nconst Search = ({ cname = \"\", id = \"\", value, onChange }) => {\r\n  return (\r\n    <input\r\n      value={value}\r\n      onChange={onChange}\r\n      type=\"text\"\r\n      placeholder=\"Type here...\"\r\n      id={id}\r\n      className={cname}\r\n      autoComplete=\"off\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","/**\r\n * Made a class to handle Local Storage functions/queries.\r\n */\r\n\r\nclass LocalStorageHelper {\r\n  static add = (v) => {\r\n    let a = [];\r\n    // Parse the serialized data back into an aray of objects\r\n    a = JSON.parse(localStorage.getItem(\"nominatedMovies\")) || [];\r\n    // Push the new data (whether it be an object or anything else) onto the array\r\n    a.push(v);\r\n    // Re-serialize the array back into a string and store it in localStorage\r\n    localStorage.setItem(\"nominatedMovies\", JSON.stringify(a));\r\n  };\r\n\r\n  static get = (k) => {\r\n    const selected = JSON.parse(localStorage.getItem(k)) || [];\r\n    return selected;\r\n  };\r\n\r\n  static removeItem = (k, id) => {\r\n    let nominated = Object.values(this.get(k));\r\n    nominated = JSON.stringify(\r\n      nominated.filter((movie) => movie.imdbID !== id)\r\n    );\r\n    localStorage.setItem(k, nominated);\r\n  };\r\n}\r\n\r\nexport default LocalStorageHelper;\r\n","import axios from \"axios\";\r\nimport LocalStorageHelper from \"../localStorageHelper\";\r\n\r\nexport const signIn = (id) => {\r\n  return {\r\n    type: \"SIGN_IN\",\r\n    id,\r\n  };\r\n};\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: \"SIGN_OUT\",\r\n  };\r\n};\r\n\r\nexport const searchMovies = (q) => async (dispatch) => {\r\n  /**\r\n   * when a movie or a word is typed in, we want to run this action creator.\r\n   * We return a lower case version of the query, pass it to the API\r\n   * if there is a Search property, the movie exists, else it's an error.\r\n   */\r\n  q = q.toLowerCase().trim();\r\n  const response = await axios.get(\r\n    `https://www.omdbapi.com/?apikey=b3c713a5&s=${q}&type=movie`\r\n  );\r\n\r\n  if (response.data.Search) {\r\n    dispatch({ type: \"SEARCH_MOVIE\", payload: response.data });\r\n  } else {\r\n    dispatch({ type: \"SEARCH_MOVIE_U\", payload: response.data.Error });\r\n  }\r\n};\r\n\r\nexport const fetchStatus = (callback) => async (dispatch, getState) => {\r\n  //1. Get the GAuth object and update its status\r\n  //when the sign in/out button is pressed.\r\n\r\n  await dispatch(getGoogleAuth());\r\n  //2. Get the initial status of the user and show it on the screen.\r\n  const auth = getState().auth;\r\n  callback(auth.isSignedIn.get());\r\n\r\n  //3. Update the status of auth and store it in the store.\r\n  dispatch({ type: \"FETCH_GSTATUS\", payload: auth.isSignedIn.get() });\r\n\r\n  // 4. attach a listener to whenever the isSignedIn property changes.\r\n  // 5. Update the store and by doing so, the component too.\r\n  auth.isSignedIn.listen(() => {\r\n    callback(auth.isSignedIn.get());\r\n    dispatch({ type: \"FETCH_GSTATUS\", payload: auth.isSignedIn.get() });\r\n  });\r\n};\r\n\r\nexport const getGoogleAuth = () => async (dispatch) => {\r\n  /**\r\n   * The load function takes a callback, which we can use async/await or extends with .then.\r\n   * So i used a dummy resolve and awaited the promise to completion.\r\n   */\r\n  await new Promise((resolve, reject) => {\r\n    window.gapi.load(\"client:auth2\", resolve);\r\n  });\r\n\r\n  /**\r\n   * when the load function is completed, we now have access to the client.init function.\r\n   * This function helps us initialize and authorize the application's use of their API.\r\n   * The scope refers to what data we wish to use.\r\n   * Upon completing this project, I now realize I only needed the 'email' scope.\r\n   */\r\n  await window.gapi.client.init({\r\n    clientId:\r\n      \"966761145318-lchet6c8rli1o5jk7k82nrug9fpqe8og.apps.googleusercontent.com\",\r\n    scope: \"profile\",\r\n  });\r\n\r\n  const auth = window.gapi.auth2.getAuthInstance();\r\n  dispatch({ type: \"FETCH_GAUTH\", payload: auth });\r\n};\r\n\r\nexport const saveMovies = (movie) => async (dispatch, getState) => {\r\n  //what do i want to happen\r\n  //I want user to have their movie saved in the server\r\n  //use part of their sign in id\r\n  //auth2.currentUser.get().getBasicProfile() for the names of the user.\r\n  //their id in the server can be: take first five letters of their given name in between the first 5 and\r\n  //last 5 numbers.\r\n\r\n  /**\r\n   * In the end, I really didn't end up using the below information partaining ti the user's name and id.\r\n   * Initially upon writing this action creator, I was gonna create a unique user name for each user.\r\n   * This username would have the movies linked to it, but I scrapped the idea later on.\r\n   */\r\n\r\n  const { signInId, auth } = getState();\r\n  let firsthalf = signInId.id.split(\"\").splice(0, 5).join(\"\");\r\n  let secondhalf = signInId.id\r\n    .split(\"\")\r\n    .splice(signInId.id.length - 5)\r\n    .join(\"\");\r\n  const uniqueName = `${firsthalf}${auth.currentUser\r\n    .get()\r\n    .getBasicProfile()\r\n    .getGivenName()}${secondhalf}`;\r\n\r\n  const myFavMovie = {\r\n    ...movie,\r\n  };\r\n\r\n  /**\r\n   * This code snippet below is used to prevent duplicates being stored in the user's browser.\r\n   */\r\n  if (\r\n    LocalStorageHelper.get(\"nominatedMovies\").every(\r\n      (movie) => movie.Title !== myFavMovie.Title\r\n    )\r\n  ) {\r\n    LocalStorageHelper.add(myFavMovie);\r\n  }\r\n\r\n  dispatch({ type: \"NOM_FILM\", payload: myFavMovie });\r\n};\r\n\r\nexport const deleteMovie = (id) => async (dispatch, getState) => {\r\n  //take the deleted movies id and use it to delete the fil off nominated list\r\n  LocalStorageHelper.removeItem(\"nominatedMovies\", id);\r\n  dispatch({ type: \"DELETE_MOVIE\", payload: id });\r\n};\r\n\r\nexport const fetchNominatedMovies = () => {\r\n  //get the movies inside localStorage\r\n  return {\r\n    type: \"FETCH_ALL\",\r\n    payload: LocalStorageHelper.get(\"nominatedMovies\"),\r\n  };\r\n};\r\n\r\nexport const fetchNominatedMoviesRS = () => async (dispatch, getState) => {\r\n  await dispatch(fetchNominatedMovies());\r\n\r\n  const nominatedMoviesFromRS = getState().nominatedFilm;\r\n\r\n  return {\r\n    type: \"FETCH_ALL_RS\",\r\n    payload: nominatedMoviesFromRS,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { saveMovies, deleteMovie } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass MovieButton extends React.Component {\r\n  /**\r\n   * I opted to use class level state instead of redux.\r\n   * It will keep track of whether a button has been pressed or not.\r\n   */\r\n  state = { status: \"Nominate\" };\r\n\r\n  componentDidMount() {\r\n    /**\r\n     * When component gets rendered, check if localStorage has a clue about --\r\n     * the nominated movies.\r\n     */\r\n    if (!JSON.parse(localStorage.getItem(\"nominatedMovies\"))) {\r\n      return;\r\n    }\r\n\r\n    const localMovies = localStorage.getItem(\"nominatedMovies\");\r\n    const isFound = JSON.parse(localMovies).find(\r\n      (movie) => movie.Title === this.props.movie.Title\r\n    );\r\n\r\n    //RS = redux store\r\n    const isFoundInRS = !Object.values(this.props.reduxMovies).every(\r\n      (movie) => movie.Title !== this.props.movie.Title\r\n    );\r\n\r\n    /**\r\n     * This code is used to update the redux store with the movies stored in the user's browser.\r\n     * If true, update the movie's button to Nominated (green) and update the store.\r\n     */\r\n    if (isFound && isFoundInRS) {\r\n      this.setState({ status: \"Nominated\" });\r\n      this.props.saveMovies(this.props.movie);\r\n    }\r\n  }\r\n\r\n  onClickHandler = () => {\r\n    /**\r\n     * Simple onClick handler.\r\n     * If the button has the text nominated and is clicked, change back to Nominate.\r\n     * else, change to nominated and update ths store in both cases.\r\n     */\r\n    if (this.state.status === \"Nominated\") {\r\n      this.setState({ status: \"Nominate\" });\r\n      this.props.deleteMovie(this.props.movie.imdbID);\r\n    } else {\r\n      this.setState({ status: \"Nominated\" });\r\n      this.props.saveMovies(this.props.movie);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    /**\r\n     * The toggle button didn't work for me on Semantic UI, so I used a work-around.\r\n     * If status is nominated, change to green, else, use grey.\r\n     * I tried using disabled as a state, but got re-render infinite issues, so I used a --\r\n     * work-around; created a class with specific rules to mimic the desired effect.\r\n     */\r\n    let nominatedColor = this.state.status === \"Nominated\" ? \"positive\" : \"\";\r\n    let disabledClass = {};\r\n    if (\r\n      this.state.status === \"Nominate\" &&\r\n      Object.values(this.props.reduxMovies).length === 5\r\n    ) {\r\n      disabledClass = { pointerEvents: \"none\", opacity: \"0.4\" };\r\n    }\r\n\r\n    return (\r\n      <div className=\"center\">\r\n        <div\r\n          className={`ui toggle button ${nominatedColor}`}\r\n          style={disabledClass}\r\n          onClick={this.onClickHandler}\r\n        >\r\n          {this.state.status}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { reduxMovies: state.nominatedFilm };\r\n};\r\n\r\nexport default connect(mapStateToProps, { saveMovies, deleteMovie })(\r\n  MovieButton\r\n);\r\n","import React from \"react\";\r\nimport MovieButton from \"./MovieButton\";\r\n\r\n/**\r\n * I finally found an opportunity to actually create a reusable component.\r\n * I fist created MovieList and noticed when i was creating the component --\r\n * MyMovieList, the rendering of the movies would be the same. So i created --\r\n * this component to handle that.\r\n */\r\n\r\nclass ReusableMovieList extends React.Component {\r\n  renderMovieButton = (movie, options = null) => {\r\n    return (\r\n      <div className=\"ui dimmer \">\r\n        <div className=\"content\">\r\n          <MovieButton movie={movie} options={options}></MovieButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  renderMovies = () => {\r\n    /**\r\n     * We take the props that are passed in.\r\n     */\r\n    const { movies } = this.props;\r\n    const { signInID } = this.props;\r\n\r\n    /**\r\n     * This is a workaround honestly, since my success call would return a function reference,\r\n     * I also needed to create a dummy function for a failure case.\r\n     * i kept getting re-render issues, and this bypasses that.\r\n     */\r\n    const hideButton =\r\n      signInID === null\r\n        ? (data) => {\r\n            return \"\";\r\n          }\r\n        : this.renderMovieButton;\r\n\r\n    /**\r\n     * Semantic UI uses jQuery, I'm using REACt, so I can't use DOM.queryS.\r\n     * I used a workaround and used Refs, not to get the element, but to have access\r\n     * to the window object, otherwise I would get jquery is undefined or other errors.\r\n     * */\r\n    return Object.values(movies).map((movie) => {\r\n      return (\r\n        <div\r\n          className=\"eight wide mobile four wide tablet three wide computer column stretched\"\r\n          key={movie.imdbID}\r\n        >\r\n          <div className=\"ui special cards\">\r\n            <div className=\"eq-card ui card fluid\">\r\n              <div\r\n                className=\"blurring dimmable image\"\r\n                ref={() => {\r\n                  window.$(\".special.cards .image\").dimmer({\r\n                    on: \"hover\",\r\n                  });\r\n                }}\r\n              >\r\n                {movie.Poster !== \"N/A\" ? (\r\n                  <img src={movie.Poster} className=\"poster-img\"></img>\r\n                ) : (\r\n                  <img\r\n                    src=\"https://placehold.it/300x200\"\r\n                    srcSet=\"https://placehold.it/300x200 300w\"\r\n                    sizes=\"100vw\"\r\n                    alt=\"Placeholder\"\r\n                  />\r\n                )}\r\n                {hideButton(movie)}\r\n              </div>\r\n              <div className=\"content\">\r\n                <a className=\"header\">{movie.Title}</a>\r\n                <div className=\"meta\">\r\n                  <span className=\"date\">Created in {movie.Year}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return this.renderMovies();\r\n  }\r\n}\r\n\r\nexport default ReusableMovieList;\r\n","import React, { Component } from \"react\";\r\nimport TypedJs from \"../TypedJs\";\r\nimport \"../../css/MovieList.css\";\r\nimport Search from \"../Search\";\r\nimport { connect } from \"react-redux\";\r\nimport { searchMovies, fetchNominatedMovies } from \"../../actions\";\r\nimport ReusableMovieList from \"../ReusableMovieList\";\r\n\r\nclass MovieList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  state = { term: \"\" };\r\n\r\n  componentDidMount() {\r\n    this.timer = null;\r\n    this.props.fetchNominatedMovies();\r\n  }\r\n\r\n  /**\r\n   * My attempt on debouncing or throttling the search speed.\r\n   * when a key is pressed, get rid of the timeout and create a new one.\r\n   * If this function is called within 400, create another timeout and wait for further response.\r\n   */\r\n  onChangeHandler = (e) => {\r\n    clearTimeout(this.timer);\r\n    this.setState({ term: e.target.value });\r\n    this.timer = setTimeout(() => {\r\n      if (e.target.value.trim().length === 0) {\r\n        this.props.searchMovies(\"\");\r\n        return;\r\n      }\r\n      this.props.searchMovies(e.target.value);\r\n    }, 400);\r\n  };\r\n\r\n  /**\r\n   * For most movie searches, this will return 10 movies.\r\n   * The first if clause is written to return an error to the screen.\r\n   * Otherwise it will take the count of movies returned.\r\n   */\r\n  renderResultsFound = () => {\r\n    const { movies } = this.props;\r\n    const moviesArr = Object.values(movies);\r\n    if (moviesArr.length === 1 && this.state.term.trim() !== \"\") {\r\n      return moviesArr[0];\r\n    }\r\n    if (this.state.term.trim() === \"\") return null;\r\n    return moviesArr.length + \" results found!\";\r\n  };\r\n\r\n  renderContent = () => {\r\n    /**\r\n     * On search, hide the typed container class, which will puch the search bar to the top\r\n     * of the screen since by hiding the container class, we will also be removing the margin.\r\n     */\r\n    const labelClass = this.state.term.trim().length === 0 ? \"show\" : \"hide\";\r\n\r\n    return (\r\n      <div className=\"ui container\">\r\n        <div className=\"ui center aligned grid\">\r\n          <div className={`sixteen wide column ${labelClass} typed-container`}>\r\n            <span className=\"prefix-typed\">FIND YOUR</span>\r\n            <TypedJs\r\n              strings={[\"<strong>MOVIE</strong>\"]}\r\n              className=\"typed_string\"\r\n            ></TypedJs>\r\n          </div>\r\n\r\n          <div className={`ten wide column search-container ${labelClass}`}>\r\n            <h1>Search</h1>\r\n            <div className=\"ui large transparent fluid input\">\r\n              <Search\r\n                cname=\"ui center aligned\"\r\n                id=\"transparent-input\"\r\n                value={this.state.term}\r\n                onChange={this.onChangeHandler}\r\n              ></Search>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"ui grid\"\r\n          style={{ textAlign: \"right\", marginTop: \"-1.25rem\" }}\r\n        >\r\n          <div className=\"thirteen wide column\">\r\n            <span>{this.renderResultsFound()}</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"ui centered align grid\">\r\n          {\r\n            <ReusableMovieList\r\n              movies={this.props.movies}\r\n              signInID={this.props.signInID}\r\n            ></ReusableMovieList>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return this.renderContent();\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    movies: state.queryResults,\r\n    signInID: state.signInId.id,\r\n    nominatedFilms: state.nominatedFilm,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { searchMovies, fetchNominatedMovies })(\r\n  MovieList\r\n);\r\n","import { createBrowserHistory } from \"history\";\r\n\r\n/**\r\n * Instead of using the default, automatically created BrowserHistory's history object,\r\n * we'll push the history object manually.\r\n */\r\n\r\nexport default createBrowserHistory();\r\n","import React from \"react\";\r\nimport \"../css/GoogleAuth.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStatus, signIn, signOut } from \"../actions\";\r\n\r\n/**\r\n * This applicaton requires user to have a gmail account. Sorry not sorry.\r\n * The account will be used to store the nominated movies.\r\n * When user signs out, the searched movies will not have action buttons.\r\n */\r\n\r\nclass GoogleAuth extends React.Component {\r\n  /**\r\n   * When component mounts, call the action creator and get the user's google auth2 object.\r\n   * The callback is used because Google gives us a convenient 'listen' method on\r\n   * when user signs in and out.\r\n   */\r\n  componentDidMount() {\r\n    this.props.fetchStatus(this.onAuthChange);\r\n  }\r\n\r\n  onAuthChange = (isSignedIn) => {\r\n    /**\r\n     * The listen function will detect when a change occurs, and when such change occurs,\r\n     * we want to check if user is signed in already (get the id associated with the user),\r\n     * else, sign out.\r\n     */\r\n    if (isSignedIn) {\r\n      this.props.signIn(this.props.current.currentUser.get().getId());\r\n    } else {\r\n      this.props.signOut();\r\n    }\r\n  };\r\n\r\n  signUserIn = () => {\r\n    /**\r\n     * Current is the gapi auth2 object, we call its SI/SO functions.\r\n     */\r\n    this.props.current.signIn();\r\n  };\r\n\r\n  signUserOut = () => {\r\n    /**\r\n     * Current is the gapi auth2 object, we call its SI/SO functions.\r\n     */\r\n    this.props.current.signOut();\r\n  };\r\n\r\n  renderAuthButtons = () => {\r\n    /**\r\n     * If user is signed in, create a sign out button.\r\n     */\r\n    if (this.props.isSignedIn === true) {\r\n      return (\r\n        <button\r\n          className=\"negative ui button so-button\"\r\n          onClick={this.signUserOut}\r\n        >\r\n          Sign Out\r\n        </button>\r\n      );\r\n      /**\r\n       * If user is signed out, create a sign in button.\r\n       */\r\n    } else if (this.props.isSignedIn === false) {\r\n      return (\r\n        <button\r\n          onClick={this.signUserIn}\r\n          className=\"positive ui button so-button\"\r\n        >\r\n          Sign In\r\n        </button>\r\n      );\r\n    }\r\n    //when component is first rendered, return null to avoid issues.\r\n    return null;\r\n  };\r\n\r\n  render() {\r\n    return <React.Fragment>{this.renderAuthButtons()}</React.Fragment>;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { current: state.auth, isSignedIn: state.isSignedIn };\r\n};\r\nexport default connect(mapStateToProps, { fetchStatus, signIn, signOut })(\r\n  GoogleAuth\r\n);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\n/**\r\n * Banner can be more reusable with props, but for the sake of this project, it does the job.\r\n * Checks if user has already submitted 5 movie nominations and displays a message if so.\r\n */\r\nclass Banner extends React.Component {\r\n  render() {\r\n    if (this.props.totalNoms.length < 5) {\r\n      return null;\r\n    }\r\n\r\n    if (this.props.isSignedIn === null) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        className=\"ui center aligned grid\"\r\n        style={{ position: \"sticky\", top: \"0\", zIndex: \"1000\" }}\r\n      >\r\n        <div\r\n          className=\"ui column banner test ad\"\r\n          data-text=\"You have reached the maximum number of nominations (5).\"\r\n          style={{ backgroundColor: \"#252a4d\" }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    totalNoms: Object.values(state.nominatedFilm),\r\n    isSignedIn: state.signInId.id,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Banner);\r\n","import React from \"react\";\r\nimport GoogleAuth from \"./GoogleAuth\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Banner from \"./Banner\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"ui container\">\r\n      <Banner></Banner>\r\n      <div className=\"ui secondary menu\">\r\n        <Link to=\"/movies\" className=\"item\">\r\n          Shoppies\r\n        </Link>\r\n        <div className=\"right menu\">\r\n          <GoogleAuth></GoogleAuth>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchNominatedMoviesRS } from \"../../actions\";\r\nimport ReusableMovieList from \"../ReusableMovieList\";\r\n\r\nclass MyMovieList extends React.Component {\r\n  componentDidMount() {\r\n    /**\r\n     * Routes are independant of each other, so i need to dispatch the action creator below.\r\n     * This action creator gets the movies stored inside the redux store, hence 'RS'.\r\n     */\r\n    this.props.fetchNominatedMoviesRS();\r\n  }\r\n\r\n  renderMovies = () => {\r\n    /**\r\n     * Check if the user is currently signed in,\r\n     * if yes, show the movies (if any).\r\n     * if no, show a helpful message.\r\n     */\r\n    if (this.props.signInID === null) {\r\n      return <h4>Please sign in to see your nominated movies.</h4>;\r\n    }\r\n    return (\r\n      <ReusableMovieList\r\n        movies={this.props.myMovies}\r\n        signInID={this.props.signInID}\r\n      ></ReusableMovieList>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui container\">\r\n        <div className=\"ui center aligned grid\">\r\n          <div className=\"column\">\r\n            <h3>My Nominated Picks</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"ui centered align grid\">{this.renderMovies()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    myMovies: Object.values(state.nominatedFilm),\r\n    signInID: state.signInId.id,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { fetchNominatedMoviesRS })(\r\n  MyMovieList\r\n);\r\n","import React from \"react\";\r\nimport { Route, Router } from \"react-router-dom\";\r\nimport MovieList from \"./CRUD/MovieList\";\r\nimport history from \"../history\";\r\nimport Header from \"./Header\";\r\nimport MyMovieList from \"./CRUD/MyMovieList\";\r\n\r\n/**\r\n * In hindsight upon completing the project, I didn't need to pass the history object manually.\r\n * It already keeps track of it but just in case i ever want to redirect the user, I can call\r\n * the historys function and import it wherever in my project.\r\n */\r\nconst App = () => {\r\n  return (\r\n    <div className=\"ui container\">\r\n      <Router history={history}>\r\n        <Header></Header>\r\n        <Route path=\"/movies\" component={MovieList} exact></Route>\r\n        <Route path=\"/movies/show\" component={MyMovieList} exact></Route>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport movieReducers from \"./movieReducers\";\r\nimport fetchAuth from \"./fetchAuth\";\r\nimport fetchStatus from \"./fetchStatus\";\r\nimport getId from \"./getId\";\r\nimport nominatedFilm from \"./nominatedFilm\";\r\n\r\nexport default combineReducers({\r\n  dummy: () => \"some dummy code here, nothing much going on\",\r\n  queryResults: movieReducers,\r\n  auth: fetchAuth,\r\n  isSignedIn: fetchStatus,\r\n  signInId: getId,\r\n  nominatedFilm,\r\n});\r\n","export default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"SEARCH_MOVIE\":\r\n      //returns an array of movie objects spread in this new on-the-fly object.\r\n      return { ...action.payload.Search };\r\n    case \"SEARCH_MOVIE_U\":\r\n      //return error as an object, identical to a success call above.\r\n      return { error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_GAUTH\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = null, action) => {\r\n  switch (action.type) {\r\n    case \"FETCH_GSTATUS\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = { isSignedIn: null, id: null }, action) => {\r\n  switch (action.type) {\r\n    case \"SIGN_IN\":\r\n      //if is their gmail id associated with their account.\r\n      return { ...state, isSignedIn: true, id: action.id };\r\n    case \"SIGN_OUT\":\r\n      //rewrite isSignedIn and id if user signs out of our app.\r\n      return { ...state, isSignedIn: false, id: null };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"NOM_FILM\":\r\n      return { ...state, [action.payload.imdbID]: action.payload };\r\n    case \"DELETE_MOVIE\":\r\n      delete state[action.payload];\r\n      return { ...state };\r\n    case \"FETCH_ALL\":\r\n      /**\r\n       * State will be some object like {name: 'Billy', age: 10, id: 127}\r\n       * We want to store this data with the key as the id,\r\n       * {127: {name: 'Billy', age: 10, id: 127}, 128: Amanda: {...etc}}\r\n       */\r\n      const nested = {};\r\n      action.payload.forEach((movie) => {\r\n        nested[movie.imdbID] = movie;\r\n      });\r\n      return { ...state, ...nested };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport \"./css/global.css\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { applyMiddleware, createStore, compose } from \"redux\";\r\nimport App from \"./components/App\";\r\nimport reducers from \"./reducers\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n/**\r\n * Copied this code from the redux tools github page to monitor changes in the redux store.\r\n */\r\nconst composeEnhancers =\r\n  (typeof window !== \"undefined\" &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\r\n  compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App></App>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}